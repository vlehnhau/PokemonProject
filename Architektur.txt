Im Folgenden werde ich die Architektur von meinem Programm beschrieben.

Die Aufgabe der Gui-Klasse:
Die Gui-Klasse übernimmt alles was mit der Darstellung und der Eingabe zu tun hat. Ich habe mich hierfür entschieden, da so die Spiellogik
möglichst stark von der Obferfläche getrennt ist. In der On refresh Methode wird immer überprüft, in welcher Phase des Spiels man sich
zum jeweiligen Zeitpunkt befindet (eine der Kampfphasen, Normlazustand, ob ein Monster gefunden wurde oder ob das Spiel gewonnen bzw. verloren wurde ...).
Die Anzeige und welche Tasten getdrückt werden können, wird nach diesem Status entschieden.
Außerdem wird immer eine bestimmte Zeit gewartet, damit der Spieler sich nicht zu schnell bewegt. Diese Zeit kann angepasst werden.
Die Gui hat ein game-Objekt, welches sich um die Spiellogik kümmert. Wenn ein Knopf gedrückt wird, wird in der Spiellogik die passende Methode
aufgerufen. So wird bei gedrückter "Pfeiltaste-Nach-Oben" im normalen Modus zum Beispiel die Methode movePlayer mit dem Parrameter "up" über das game-Objekt aufgerufen.
In besonderen Fällen muss auch direkt eine neue Phase eingeleitet werden. Zum Beispiel im Dialog während eines Kapfes, da hier nur auf einen Tastenanschlag gewartet wird
und nichts in der Spiellogik passiert.
Das game-Objekt wird immer dann erzeugt wenn ein level ausgewählt wird und der Konstruktor von game bekommt als Parameter das ausgewählte level

Die Aufgabe der Game-Klasse:
Diese Klasse kümmert sich um sämtliche "Hintergrund-Logiken". Der Konstruktor liest auserdem die passende map ein.
Die movePlayer Methode wird immer aufgerufen, wenn der Player sich in eine bestimmte Richtung bewegen soll. Diese Richtung wird der Methode beim Aufruf als Parameter übergeben.
Die Methode schaut nach, auf was für einem Feld der Player sich zur Zeit befindet und ruft die dazu passenden Methoden auf. Diese werden dann ggf. die Phasen ändern,
das Monster heilen usw. Wenn der Spieler auf einen Gegner trifft, wird die fight-Methode aufgerufen. Diese führt alle kampf-bezogenen Spiellogiken aus.

Zudem hat die Game-Klasse alle weiteren wichtigen Objekte und Variablen wie beispielsweise das Spieler-Objekt. In diesem befinden sich die Monster des Spielers, sowie das aktive Monster,
welches von der Gui immer wieder ausgegeben wird.